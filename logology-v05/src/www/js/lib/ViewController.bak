"use strict";

import Emitter from "yasmf-emitter";
import h from "yasmf-h";
import Hammer from "hammerjs";
import matchesSelector from "matches-selector";

// private property symbols
let _title = Symbol(),
    _DOMElement = Symbol(),
    _DOMParentElement = Symbol(),
    _hammer = Symbol(),
    _view = Symbol(),
    _model = Symbol(),
    _selectorDelegates = Symbol();
export default class ViewController extends Emitter {
    constructor({model, view, title, className="GenericView"} = {}) {
        super();
        this[_title] = title;
        this[_DOMElement] = h.el(`div.${className}?is=y-container`);
        this[_DOMParentElement] = null;
        this[_hammer] = new Hammer(this[_DOMElement]);
        this[_hammer].on(this.HAMMER_EVENTS, (e)=>this.emit("hammerEvent", e));
        this[_view] = view;
        this[_model] = model;
        this[_selectorDelegates] = new Map();
        this.render();
    }

    get HAMMER_EVENTS() {
        return "tap press pan swipe";
    }

    get hammer() {
        return this[_hammer];
    }

    onHammerEvent(sender, notice, e) {
        console.log(JSON.stringify(e, null, 2));
        console.log(matchesSelector(e.target, "[is='ui-list'] [is='ui-list-item'] [is='ui-list-contents']"));
        e.target.style.backgroundColor = "red";
    }

    get view() {
        return this[_view];
    }
    set view(v) {
        this.emitSync("willReplaceView", v);
        this[_view] = v;
        this.emit("didReplaceView");
        this.render();
    }

    get model() {
        return this[_model];
    }
    set model(m) {
        this.emitSync("willReplaceModel", m);
        this[_model] = m;
        this.emit("didReplaceModel");
        this.render();
    }

    get element() {
        return this[_DOMElement];
    }
    set element(e) {
        this[_DOMElement] = e;
        this.emit("elementChanged");
        this.render();
    }

    get parentElement() {
        return this[_DOMParentElement];
    }
    set parentElement(e) {
        if (this[_DOMParentElement] && this[_DOMParentElement] !== e && this.element) {
            this.emitSync("willDetachFromParent");
            this[_DOMParentElement].removeChild(this.element);
            this[_DOMParentElement] = null;
            this.emit("didDetachFromParent");
        }
        this[_DOMParentElement] = e;
        if (this[_DOMParentElement] && this.element) {
            this.emitSync("willAttachToParent");
            this[_DOMParentElement].appendChild(this.element);
            this.emit("didAttachToParent");
        }
    }

    get title() {
        return this[_title];
    }
    set title(v) {
        this[_title] = v;
        this.emit("titleChanged");
        this.render();
    }

    render() {
        let els = [];
        if (this.view) {
            this.emitSync("willRender");
            els.push(this.renderHeading());
            els.push(this.view.render({model: this.model, controller: this}));
            els.push(this.renderFooting());
            h.renderTo(els, this.element);
            this.emit("didRender");
        }
    }

    renderHeading() {
        return undefined;
    }
    renderFooting() {
        return undefined;
    }

    destroy() {
        this.emitSync("willDestroy");
        this.parentElement = null;
        this.element = null;
        this.view = null;
        this.model = null;
        this[_hammer].destroy();
        this[_hammer] = null;
        super.destroy();
    }

}
